
image:
  name: atlassian/pipelines-awscli


#    Deployment table
#    ------------------------------------------------------
#    git branch                  | master        | develop
#    Kubernetes deployment type  | production    | staging
#    Docker image suffix         | <none>        | -dev
#    BitBucket deployment        | <not used>    | <not used>
#
#    For example, when a commit is made to 'develop', an automatic deployment will be made to all those instances running
#    in kubernetes instances where the deployment-type is 'staging', and the docker images will have a suffix '-dev'

definitions:
  services:
    mongo:
      image: mongo
    postgres:
      image: postgres
      variables:
        POSTGRES_DB: 'laratest'
        POSTGRES_USER: 'myuser'
        POSTGRES_PASSWORD: 'mypassword'

  composeInstallDev: &composeInstallDev
    name: Install Composer Dependencies
    image: composer
    caches:
      - composer
    script:
      - composer install --no-ansi --no-interaction --no-progress --no-scripts --optimize-autoloader --ignore-platform-reqs
    artifacts:
      - vendor/**

  phpTests: &phpTests
    name: Run PHP tests
    image: superchairon/laratest_php-cli
    caches:
      - composer
    services:
      - mongo
      - postgres
    script:
#      - composer install --no-ansi --no-interaction --no-progress --no-scripts --optimize-autoloader --ignore-platform-reqs
      - cp .env.example .env
      - php artisan key:generate
      - php artisan migrate:refresh --seed
      - ./vendor/bin/phpunit
#    artifacts:
#      - vendor/**

  nodeBuildAndTest: &nodeBuildAndTest
    name: Install Node dependencies, Build JS scripts, and run JS tests
    image: node:8-jessie
    caches:
      - node
    script:
      - npm install
      - npm run prod
    artifacts:
      - public/js/**
      - public/css/**

#  composerInstallNoDev: &composerInstallNoDev
#    name: Install Composer Dependencies without Dev
#    image: composer
#    caches:
#      - composer
#    script:
#      - composer install --no-ansi --no-interaction --no-progress --no-scripts --optimize-autoloader --ignore-platform-reqs --no-dev
#    artifacts:
#      - vendor/**

  buildImage: &buildImage
    name: Build and Push Docker Image
    caches:
      - docker
    services:
      - docker
    script:
      - ls -lt # list dir so that it's output in the logs, just to make sure the ./vendor dir is included from previous step
#      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - echo $GCR_JSON
      - echo $GCR_JSON > ./keyfile.json
      - docker login -u _json_key -p "$(cat ./keyfile.json)" https://gcr.io
      - if [ $BITBUCKET_BRANCH == develop ]; then SUFFIX=-dev; fi
#      - REGISTRY=superchairon
      - REGISTRY=gcr.io/coral-codex-248302/
      # build php-fpm image
      - TAG_BUILD=$REGISTRY/laratest_php-fpm${SUFFIX}:${BITBUCKET_BUILD_NUMBER}
      - TAG_LATEST=$REGISTRY/laratest_php-fpm${SUFFIX}:latest
      - docker build -t $TAG_BUILD -t $TAG_LATEST -f ./.docker/php-fpm.dockerfile .
      - docker push $TAG_BUILD
      - docker push $TAG_LATEST
      # build php-cli image
      - TAG_BUILD=$REGISTRY/laratest_php-cli${SUFFIX}:${BITBUCKET_BUILD_NUMBER}
      - TAG_LATEST=$REGISTRY/laratest_php-cli${SUFFIX}:latest
      - docker build -t $TAG_BUILD -t $TAG_LATEST -f ./.docker/php-cli.dockerfile .
      - docker push $TAG_BUILD
      - docker push $TAG_LATEST
      # build nginx image
      - TAG_BUILD=$REGISTRY/laratest_nginx${SUFFIX}:${BITBUCKET_BUILD_NUMBER}
      - TAG_LATEST=$REGISTRY/laratest_nginx${SUFFIX}:latest
      - docker build -t $TAG_BUILD -t $TAG_LATEST -f ./.docker/nginx.dockerfile .
      - docker push $TAG_BUILD
      - docker push $TAG_LATEST

  deploy: &deploy
    name: Deploy to Google Kubernetes Engine
    image: roffe/kubectl
    script:
      # Configure kubectl
      - echo $KUBE_TOKEN | base64 -d > ./kube_token
      - echo $KUBE_CA | base64 -d > ./kube_ca
      - kubectl config set-cluster standard-cluster-1 --server=https://104.154.101.15 --certificate-authority="$(pwd)/kube_ca"
      - kubectl config set-credentials bitbucket --token="$(cat ./kube_token)"
      - kubectl config set-context gke_coral-codex-248302_us-central1-a_standard-cluster-1 --cluster=standard-cluster-1 --user=bitbucket
      - kubectl config use-context gke_coral-codex-248302_us-central1-a_standard-cluster-1
      # Update image
      - if [ $BITBUCKET_BRANCH == master ]; then TYPE=production; elif [ $BITBUCKET_BRANCH == develop ]; then TYPE=staging; else TYPE=nothing; fi
      - if [ $BITBUCKET_BRANCH == develop ]; then SUFFIX=-dev; fi
      - NAMESPACES=$(kubectl get namespace --no-headers -o custom-columns=NAME:.metadata.name -l deployment-type=$TYPE)
      - >
        for namespace in $NAMESPACES;
        do
          echo deploying to $namespace;
          kubectl set image deployment/laratest-web          laratest-php=superchairon/laratest_php-fpm${SUFFIX}:${BITBUCKET_BUILD_NUMBER} --namespace=$namespace;
          kubectl set image deployment/laratest-web        laratest-nginx=superchairon/laratest_nginx${SUFFIX}:${BITBUCKET_BUILD_NUMBER}   --namespace=$namespace;
          kubectl set image deployment/laratest-queue      laratest-queue=superchairon/laratest_php-cli${SUFFIX}:${BITBUCKET_BUILD_NUMBER} --namespace=$namespace;
          kubectl set image cronjob/laratest-scheduler laratest-scheduler=superchairon/laratest_php-cli${SUFFIX}:${BITBUCKET_BUILD_NUMBER} --namespace=$namespace;
        done

pipelines:
  branches:
    develop:
      - step: *composeInstallDev
      - step: *phpTests
      - step: *nodeBuildAndTest
#      - step: *composerInstallNoDev
      - step: *buildImage
      - step: *deploy
    master:
      - step: *composeInstallDev
      - step: *phpTests
      - step: *nodeBuildAndTest
#      - step: *composerInstallNoDev
      - step: *buildImage
      - step: *deploy
#    default:
#      - step: *phpTests
#      - step: *nodeBuildAndTest
#  pull-requests:
#    develop: # only for PRs wanting to merge FROM develop
#      - step: ...
